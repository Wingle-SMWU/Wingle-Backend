name: CI-CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  S3_BUCKET_NAME: wingle-ci-bucket
  CODE_DEPLOY_APPLICATION_NAME: wingle-codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: wingle-codedeploy-group

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_user: test
          MYSQL_PASSWORD: test
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: WINGLE
        ports:
          - 3306
    
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: "17"

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*',
            '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
  
      - name: make application.yml
        run: |
          sudo mkdir -p ./src/main/resources
          sudo chmod 777 ./src/main/resources
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.MAIN_YML }}" > ./application.yml 
        shell: bash

      - name: Grant execute permission for gradlew
        run: chmod +x ./wingle/gradlew
        
      - name: setup mysql
        run: |
          sudo apt-get install -y mysql-client
          sudo service mysql start
          mysql -uroot -proot -e "CREATE DATABASE WINGLE"
          mysql -uroot -proot -e "SHOW DATABASES"
          cd ./wingle
          ./gradlew clean test

      - name: Build with Gradle
        run: |
          cd ./wingle
          ./gradlew clean build -x test
        shell: bash

      - name: Make zip file
        if: contains(github.ref, 'main')
        run: zip -r ./$GITHUB_SHA.zip .
        shell: bash

      - name: Configure AWS credentials
        if: contains(github.ref, 'main')
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
  
      - name: Upload to AWS S3
        if: contains(github.ref, 'main')
        run: |
          cd ./wingle
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://$S3_BUCKET_NAME/build/$GITHUB_SHA.zip \
            --source .
  
      # S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        if: contains(github.ref, 'main')
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=build/$GITHUB_SHA.zip,bundleType=zip
